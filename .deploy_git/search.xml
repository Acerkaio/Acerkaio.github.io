<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CF1730A/B题解</title>
    <url>/2022/10/01/CF1730B%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="TJ-时间"><a href="#TJ-时间" class="headerlink" title="TJ 时间"></a>TJ 时间</h2><h3 id="A-题："><a href="#A-题：" class="headerlink" title="A 题："></a>A 题：</h3><p>太水了，解法各种各样，真的没必要将（真的！</p>
<p>看看<a href="https://www.scorpio532992.ltd/2022/09/30/Codeforces-Round823(Div.%202)%5BA.Planets%5D/">隔壁的TJ</a>吧（真的没必要讲，纯模拟。</p>
<p>关于隔壁为啥还没有 B 题TJ（DDDD</p>
<h3 id="B-题："><a href="#B-题：" class="headerlink" title="B 题："></a>B 题：</h3><h4 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h4><p>坐标轴 n 个点，每个点的坐标是 xi (凑合着看吧，我还不会ktext），然而每个点都有一个前提时间 ti，我们需要寻找一个点 x0，使得 所有的 |xi - x0| + ti 中最大的最小。（千万不要理解成加起来最小啊，我就是掉了这个坑！</p>
<p>那天晚上，想了大约有 15-25 分钟，终于想出这么二分了（题目标签就是二分</p>
<p>智慧之神 said：二分出一个点。</p>
<p>我不知道可不可行，但我对此毫无想法（大几率是不可行的</p>
<p>应该是二分时间。</p>
<p>思路：<a href="https://www.luogu.com.cn/discuss/501749">Link</a></p>
<p>看不懂对吧，但是伟大的 <a href="https://www.luogu.com.cn/user/186045">czx</a> 却看懂了。</p>
<p>详细讲一下吧QAQ</p>
<p>我们二分的是时间啊，和一些二分题目不同，大部分二分查找题目都是直接二分答案的。</p>
<p>那么对于第 i 个点</p>
<p><img src="https://pic1.imgdb.cn/item/633839a316f2c2beb1f4b15b.png" alt="zzb" loading="lazy"></p>
<p>那么距离 xi 长为 mid - ti(mid &gt; ti) 的距离之内的范围所有的点是不是都可以作为 x0 啊（只考虑只有这一点的情况）。</p>
<p><img src="https://pic1.imgdb.cn/item/63383b0616f2c2beb1f7142b.png" alt="zzb" loading="lazy"></p>
<p>然鹅，有多个点呢？</p>
<p><img src="https://pic1.imgdb.cn/item/63383b9216f2c2beb1f7ae66.png" loading="lazy"></p>
<p>很明显，就是区间重叠部分，所以<del>我们来个递归，枚举每一个点，找到重叠部分</del>。</p>
<p>这时，我们就会收到来自 czx 的嘲讽</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Acerkaio 你学过解不等式组吗？@Acerkaio 你学过解不等式组吗？@Acerkaio 你学过解不等式组吗？@Acerkaio 你学过解不等式组吗？@Acerkaio 你学过解不等式组吗？@Acerkaio 你学过解不等式组吗？@Acerkaio 你学过解不等式组吗？@Acerkaio 你学过解不等式组吗？</span><br></pre></td></tr></table></figure>

<p>然后就会收到来自 czx 的温馨提示：左端点全部取max，右端点全部取min，最后 L&lt;=R 即为有解</p>
<h3 id="CODE："><a href="#CODE：" class="headerlink" title="CODE："></a>CODE：</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100001</span>], t[<span class="number">100001</span>];</span><br><span class="line"><span class="type">int</span> al, ar, n;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> time)</span> </span>&#123;</span><br><span class="line">	al = <span class="number">-1</span>, ar = <span class="number">1e9</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (time - t[i] &lt; <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		al = <span class="built_in">max</span>(al, a[i] - (time - t[i]));</span><br><span class="line">		ar = <span class="built_in">min</span>(ar, a[i] + (time - t[i]));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> al &lt;= ar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">    	cin &gt;&gt; n;</span><br><span class="line">    	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; a[i];</span><br><span class="line">    	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; t[i];</span><br><span class="line">    	<span class="type">double</span> l = <span class="number">0</span>, r = <span class="number">1e9</span>;</span><br><span class="line">    	<span class="type">double</span> ans;</span><br><span class="line">    	<span class="keyword">while</span> (l &lt;= r &amp;&amp; r - l &gt; <span class="number">0.0000001</span>) &#123;</span><br><span class="line">    		<span class="type">double</span> mid = (l + r) / <span class="number">2.0</span>;</span><br><span class="line">    		<span class="keyword">if</span> (<span class="built_in">check</span>(mid)) &#123;</span><br><span class="line">    			ans = (al + ar) / <span class="number">2.0</span>;</span><br><span class="line">    			r = mid - <span class="number">1</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				l = mid + <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%.6lf\n&quot;</span>, ans);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Special Thanks: CZX</p>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>CSP-2022</title>
    <url>/2022/11/06/CSP-2022/</url>
    <content><![CDATA[<p>Boom!!!</p>
<p>比赛“降智”。</p>
<h3 id="J组"><a href="#J组" class="headerlink" title="J组"></a>J组</h3><p>T4大水题我竟然看都不看就写部分分QAQ。</p>
<p>T2也是炸了，推到一个地方就暴力去解QAQ，看了一下用完全平方公式就可以解（我废了。</p>
<p>（T3不会</p>
<h3 id="S组"><a href="#S组" class="headerlink" title="S组"></a>S组</h3><p>T1 至今不会</p>
<p>T2 考场上机子被宇宙射线社坏了，在那份代码里，我如果是手动输入就可以正常运行，但如果是粘贴就显示段错误QAQ我怎么荔枝。</p>
<p>T2 本来就想 10-20 分钟骗个部分分，最后竟花了1小时，部分分还没骗到。</p>
<h1 id="QAQ"><a href="#QAQ" class="headerlink" title="QAQ"></a>QAQ</h1>]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>KMP学习笔记</title>
    <url>/2023/03/12/KMP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="重新定义水博客"><a href="#重新定义水博客" class="headerlink" title="重新定义水博客"></a>重新定义水博客</h3><p>border[y] = x 表示 b[1 ~ x] = b[(y - x + 1) ~ y]</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">find_border</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= lb; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (b[i] != b[j + <span class="number">1</span>] &amp;&amp; j) &#123; <span class="comment">//当失配时</span></span><br><span class="line">            j = border[j];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (b[i] == b[j + <span class="number">1</span>]) &#123; <span class="comment">//可以加入一个 </span></span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        border[i] = j;  <span class="comment">//储存 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">kmp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= la; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (a[i] != b[j + <span class="number">1</span>] &amp;&amp; j) j = border[j]; <span class="comment">//失恋了 </span></span><br><span class="line">        <span class="keyword">if</span> (a[i] == b[j + <span class="number">1</span>]) j++;  <span class="comment">//计入 </span></span><br><span class="line">        <span class="keyword">if</span> (j == lb) cout &lt;&lt; i - j + <span class="number">1</span> &lt;&lt; endl,j = border[j]<span class="comment">//防止j超过lb; //匹配van了 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP环境</title>
    <url>/2022/12/23/PHP%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h2><p>ε=(´ο｀*)))唉，为了以后不掉坑，现在做个笔记。</p>
<h2 id="1-PHP安装"><a href="#1-PHP安装" class="headerlink" title="1. PHP安装"></a>1. PHP安装</h2><h3 id="1-下载-PHP"><a href="#1-下载-PHP" class="headerlink" title="1. 下载 PHP"></a>1. 下载 PHP</h3><p>我的下载：VS16 x64 Non Thread Safe (2022-Dec-06 15:55:22)</p>
<p>官方下载地址：<a href="https://windows.php.net/download/">https://windows.php.n…</a></p>
<h3 id="2-修改文件"><a href="#2-修改文件" class="headerlink" title="2. 修改文件"></a>2. 修改文件</h3><p>进入目录，拷贝php.ini-production一份命名为php.ini作为php配置文件</p>
<h3 id="3-配置php-in"><a href="#3-配置php-in" class="headerlink" title="3. 配置php.in"></a>3. 配置php.in</h3><h4 id="设置扩展文件路径，找到extension-dir，去掉前面分号并配置扩展库目录，如："><a href="#设置扩展文件路径，找到extension-dir，去掉前面分号并配置扩展库目录，如：" class="headerlink" title="设置扩展文件路径，找到extension_dir，去掉前面分号并配置扩展库目录，如："></a>设置扩展文件路径，找到extension_dir，去掉前面分号并配置扩展库目录，如：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">extension_dir = &quot;E:\php\env\php-8.0.3\ext&quot;</span><br></pre></td></tr></table></figure>
<h4 id="根据需求打开gd、mysqli、pdo-mysql、mbstring、curl等常用扩展使用，去掉前面分号即可，如：extension-gd2"><a href="#根据需求打开gd、mysqli、pdo-mysql、mbstring、curl等常用扩展使用，去掉前面分号即可，如：extension-gd2" class="headerlink" title="根据需求打开gd、mysqli、pdo_mysql、mbstring、curl等常用扩展使用，去掉前面分号即可，如：extension=gd2"></a>根据需求打开gd、mysqli、pdo_mysql、mbstring、curl等常用扩展使用，去掉前面分号即可，如：extension=gd2</h4><h4 id="设置时区为中国地区，date-timezone-PRC"><a href="#设置时区为中国地区，date-timezone-PRC" class="headerlink" title="设置时区为中国地区，date.timezone =PRC"></a>设置时区为中国地区，date.timezone =PRC</h4><h4 id="设置支持短标签写法，short-open-tag-Off改为short-open-tag-On"><a href="#设置支持短标签写法，short-open-tag-Off改为short-open-tag-On" class="headerlink" title="设置支持短标签写法，short_open_tag = Off改为short_open_tag = On"></a>设置支持短标签写法，short_open_tag = Off改为short_open_tag = On</h4><h4 id="开启cgi，以支持nginx与php通信（apache则采用模块化与php通信），分别找到以下关键词进行配置（去掉前面分号-开启）如下："><a href="#开启cgi，以支持nginx与php通信（apache则采用模块化与php通信），分别找到以下关键词进行配置（去掉前面分号-开启）如下：" class="headerlink" title="开启cgi，以支持nginx与php通信（apache则采用模块化与php通信），分别找到以下关键词进行配置（去掉前面分号;开启）如下："></a>开启cgi，以支持nginx与php通信（apache则采用模块化与php通信），分别找到以下关键词进行配置（去掉前面分号;开启）如下：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cgi.force_redirect = 1</span><br><span class="line">cgi.fix_pathinfo=1</span><br><span class="line">cgi.rfc2616_headers = 0</span><br></pre></td></tr></table></figure>
<h4 id="配置session存储目录，为了安全尽可能设置为外网访问不到的服务器目录"><a href="#配置session存储目录，为了安全尽可能设置为外网访问不到的服务器目录" class="headerlink" title="配置session存储目录，为了安全尽可能设置为外网访问不到的服务器目录"></a>配置session存储目录，为了安全尽可能设置为外网访问不到的服务器目录</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">session.save_path = &quot;C:/WINDOWS/Temp&quot;</span><br></pre></td></tr></table></figure>

<p>然后把这整个文件夹添加到系统变量即可<br>PHP -v 可查看版本号</p>
<p>说明：执行php命令若报错：PHP Warning: ‘C:\Windows\SYSTEM32\VCRUNTIME140.dll’ 14.14 is not compatible……需要Visual Studio 2015、2017 和 2019支持，根据实际情况下载安装。</p>
]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/08/30/hello-world/</url>
    <content><![CDATA[<p>HEXO 博客今天终于搭建好了，采用了 hexo-theme-async 。</p>
<p>本博客将不采用评论，如需联系，请点击 CONTACT ME。 </p>
]]></content>
  </entry>
  <entry>
    <title>关于Simple-Luogu</title>
    <url>/2022/08/30/%E5%85%B3%E4%BA%8ESimple-Luogu/</url>
    <content><![CDATA[<h2 id="没错，一款崭新的洛谷样式，是我在开发-Smart-Luogu-后积累了许多经验后继而开发的简洁小清新样式。"><a href="#没错，一款崭新的洛谷样式，是我在开发-Smart-Luogu-后积累了许多经验后继而开发的简洁小清新样式。" class="headerlink" title="没错，一款崭新的洛谷样式，是我在开发 Smart-Luogu 后积累了许多经验后继而开发的简洁小清新样式。"></a>没错，一款崭新的洛谷样式，是我在开发 Smart-Luogu 后积累了许多经验后继而开发的简洁小清新样式。</h2><h2 id="整体外观十分清爽，不少处也有意想不到的动画、效果。"><a href="#整体外观十分清爽，不少处也有意想不到的动画、效果。" class="headerlink" title="整体外观十分清爽，不少处也有意想不到的动画、效果。"></a>整体外观十分清爽，不少处也有意想不到的动画、效果。</h2><h3 id="来体验一下吧："><a href="#来体验一下吧：" class="headerlink" title="来体验一下吧："></a>来体验一下吧：</h3><p><img src="https://pic.imgdb.cn/item/630df8b816f2c2beb115a012.png" loading="lazy"></p>
<p>目前还没有官网，来 <a href="https://userstyles.world/style/6062/simple-luogu-smart-luogu">Link</a>。</p>
]]></content>
      <categories>
        <category>创作</category>
      </categories>
      <tags>
        <tag>创作</tag>
      </tags>
  </entry>
  <entry>
    <title>国产系统Deepin20初体验</title>
    <url>/2023/01/25/%E5%9B%BD%E4%BA%A7%E7%B3%BB%E7%BB%9FDeepin20%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<h2 id="ISO-文件下载"><a href="#ISO-文件下载" class="headerlink" title="ISO 文件下载"></a>ISO 文件下载</h2><p>这里给个下载地址哦：<a href="https://www.deepin.org/zh/download/">https://www.deepin.org/zh/download/</a>。</p>
<h2 id="浅谈一下"><a href="#浅谈一下" class="headerlink" title="浅谈一下"></a>浅谈一下</h2><p>先说优点：</p>
<ol>
<li><p>界面简洁，作为图形化操作系统，简洁是一大看点。</p>
</li>
<li><p>对于使用者友好，安装引导人性化。</p>
</li>
<li><p>免费。</p>
</li>
</ol>
<p>缺点：</p>
<ol>
<li><p>感觉界面设计令人失望，大圆角使其显得臃肿。</p>
</li>
<li><p>功能不够完善。</p>
</li>
<li><p>五子棋机器人太菜了。</p>
</li>
</ol>
<p><img src="https://pic.imgdb.cn/item/63d11eecface21e9ef7e8f66.png" alt="Acerkaio qwq" loading="lazy"></p>
<p>还有一点：我把缩小动画换成什么魔灯然后缩小一个界面就死机了，现在一开机就黑屏。qwq</p>
]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>树链剖分学习笔记</title>
    <url>/2023/01/13/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="树链剖分"><a href="#树链剖分" class="headerlink" title="树链剖分"></a>树链剖分</h2><p>树链剖分（树剖/链剖）有多种形式，如 重链剖分，长链剖分 和用于 Link/cut Tree 的剖分（有时被称作“实链剖分”），大多数情况下（没有特别说明时），“树链剖分”都指“重链剖分”。<br>引自：<a href="https://oi-wiki.org/graph/hld/#%E5%AD%90%E6%A0%91%E7%BB%B4%E6%8A%A4">OI-WIKI</a></p>
<h3 id="重链剖分"><a href="#重链剖分" class="headerlink" title="重链剖分"></a>重链剖分</h3><h4 id="我们给出一些定义"><a href="#我们给出一些定义" class="headerlink" title="我们给出一些定义"></a>我们给出一些定义</h4><ul>
<li><p>定义 重子节点 表示其子节点中子树最大的子结点。如果有多个子树最大的子结点，取其一。如果没有子节点，就无重子节点。</p>
</li>
<li><p>定义 轻子节点 表示剩余的所有子结点。</p>
</li>
<li><p>从这个结点到重子节点的边为 重边。</p>
</li>
<li><p>到其他轻子节点的边为 轻边。</p>
</li>
<li><p>若干条首尾衔接的重边构成 重链。</p>
</li>
</ul>
<p><img src="https://oi-wiki.org/graph/images/hld.png" loading="lazy"></p>
<p>简单来说，我们要做的就是把一颗树剖分成一条条链（如图左到图右）</p>
<p>具体点：我们把落单的结点也当作重链，那么我们要将整棵树就被剖分成若干条重链。</p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>分两个 DFS，所需变量：</p>
<p>fa[] : fa[i] 表示第 i 个节点的父亲节点；<br>Hson[] : Hson[i] 表示第 i 个节点的重儿子节点；<br>Dep[] : Dep[i] 表示第 i 个节点的深度（根节点深度为 1）；<br>Size[] : Size[i] 表示第 i 个节点的子树大小；<br>Top[] : Top[i] 表示第 i 个节点所在的链的顶部节点；<br>seg[] : seg[i] 表示第 i 个节点的 DFS 序；<br>rev[] : 表示 DFS 序所对应的节点编号。</p>
<p>CODE：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Podfs1</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">	fa[p] = f;</span><br><span class="line">	Dep[p] = Dep[f] + <span class="number">1</span>;</span><br><span class="line">	Size[p] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = head[p]; i; i = node[i].next) &#123;</span><br><span class="line">		<span class="type">int</span> v = node[i].y;</span><br><span class="line">		<span class="keyword">if</span> (v == f) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">Podfs1</span>(v, p);</span><br><span class="line">		Size[p] += Size[v];</span><br><span class="line">		<span class="keyword">if</span> (Size[v] &gt; Size[Hson[p]]) Hson[p] = v;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Podfs2</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> top)</span> </span>&#123;</span><br><span class="line">	++DFNtot;</span><br><span class="line">	Top[p] = top;</span><br><span class="line">	seg[p] = DFNtot;</span><br><span class="line">	rev[DFNtot] = p;</span><br><span class="line">	<span class="keyword">if</span> (Hson[p])</span><br><span class="line">		<span class="built_in">Podfs2</span>(Hson[p], top);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = head[p]; i; i = node[i].next) &#123;</span><br><span class="line">		<span class="type">int</span> v = node[i].y;</span><br><span class="line">		<span class="keyword">if</span> (v == fa[p]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span> (Hson[p] != v) <span class="built_in">Podfs2</span>(v, v);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配合线段树与实现 LCA：</p>
<p><a href="https://www.luogu.com.cn/problem/P3384">P3384 【模板】重链剖分/树链剖分</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> _ = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> N, M, P, R, val[_];</span><br><span class="line"><span class="type">int</span> fa[_], Hson[_], Dep[_], Size[_], Top[_], seg[_], rev[_], DFNtot = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> head[_], Tot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">	<span class="type">int</span> y, next;</span><br><span class="line">	<span class="built_in">Node</span>() &#123;next = <span class="number">0</span>;&#125;</span><br><span class="line">&#125; node[<span class="number">2</span> * _];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	++Tot;</span><br><span class="line">	node[Tot].y = y;</span><br><span class="line">	node[Tot].next = head[x];</span><br><span class="line">	head[x] = Tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*--树剖dfs--*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Podfs1</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">	fa[p] = f;</span><br><span class="line">	Dep[p] = Dep[f] + <span class="number">1</span>;</span><br><span class="line">	Size[p] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = head[p]; i; i = node[i].next) &#123;</span><br><span class="line">		<span class="type">int</span> v = node[i].y;</span><br><span class="line">		<span class="keyword">if</span> (v == f) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">Podfs1</span>(v, p);</span><br><span class="line">		Size[p] += Size[v];</span><br><span class="line">		<span class="keyword">if</span> (Size[v] &gt; Size[Hson[p]]) Hson[p] = v;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Podfs2</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> top)</span> </span>&#123;</span><br><span class="line">	++DFNtot;</span><br><span class="line">	Top[p] = top;</span><br><span class="line">	seg[p] = DFNtot;</span><br><span class="line">	rev[DFNtot] = p;</span><br><span class="line">	<span class="keyword">if</span> (Hson[p])</span><br><span class="line">		<span class="built_in">Podfs2</span>(Hson[p], top);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = head[p]; i; i = node[i].next) &#123;</span><br><span class="line">		<span class="type">int</span> v = node[i].y;</span><br><span class="line">		<span class="keyword">if</span> (v == fa[p]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span> (Hson[p] != v) <span class="built_in">Podfs2</span>(v, v);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*--线段树--*/</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tree</span> &#123;</span><br><span class="line">	<span class="type">int</span> l, r, sum;</span><br><span class="line">	<span class="type">int</span> lazy;</span><br><span class="line">&#125; tree[<span class="number">4</span> * _];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lson</span><span class="params">(<span class="type">int</span> root)</span> </span>&#123;<span class="keyword">return</span> root &lt;&lt; <span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rson</span><span class="params">(<span class="type">int</span> root)</span> </span>&#123;<span class="keyword">return</span> root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Push_Up</span><span class="params">(<span class="type">int</span> root)</span> </span>&#123;</span><br><span class="line">	tree[root].sum = (tree[<span class="built_in">lson</span>(root)].sum + tree[<span class="built_in">rson</span>(root)].sum) % P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Push_Down</span><span class="params">(<span class="type">int</span> root)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (tree[root].lazy != <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="type">int</span> num = tree[root].lazy;</span><br><span class="line">		tree[<span class="built_in">lson</span>(root)].sum = (tree[<span class="built_in">lson</span>(root)].sum + (tree[<span class="built_in">lson</span>(root)].r - tree[<span class="built_in">lson</span>(root)].l + <span class="number">1</span>) * num % P) % P;</span><br><span class="line">		tree[<span class="built_in">rson</span>(root)].sum = (tree[<span class="built_in">rson</span>(root)].sum + (tree[<span class="built_in">rson</span>(root)].r - tree[<span class="built_in">rson</span>(root)].l + <span class="number">1</span>) * num % P) % P;</span><br><span class="line">		tree[<span class="built_in">lson</span>(root)].lazy = (tree[<span class="built_in">lson</span>(root)].lazy + num) % P;</span><br><span class="line">		tree[<span class="built_in">rson</span>(root)].lazy = (tree[<span class="built_in">rson</span>(root)].lazy + num) % P;</span><br><span class="line">		tree[root].lazy = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Build</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> root)</span> </span>&#123;</span><br><span class="line">	tree[root].l = l;</span><br><span class="line">	tree[root].r = r;</span><br><span class="line">	<span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">		tree[root].sum = val[rev[l]] % P;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">Build</span>(l, mid, <span class="built_in">lson</span>(root));</span><br><span class="line">	<span class="built_in">Build</span>(mid + <span class="number">1</span>, r, <span class="built_in">rson</span>(root));</span><br><span class="line">	<span class="built_in">Push_Up</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Change</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R, <span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">		tree[root].sum += (r - l + <span class="number">1</span>) * num % P;</span><br><span class="line">		tree[root].sum %= P;</span><br><span class="line">		tree[root].lazy += num % P;</span><br><span class="line">		tree[root].lazy %= P;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">Push_Down</span>(root);</span><br><span class="line">	<span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (L &lt;= mid) </span><br><span class="line">		<span class="built_in">Change</span>(<span class="built_in">lson</span>(root), l, mid, L, R, num);</span><br><span class="line">	<span class="keyword">if</span> (mid &lt; R)</span><br><span class="line">		<span class="built_in">Change</span>(<span class="built_in">rson</span>(root), mid + <span class="number">1</span>, r, L, R, num);</span><br><span class="line">	<span class="built_in">Push_Up</span>(root);</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Query</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (L &gt; r || R &lt; l) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) </span><br><span class="line">		<span class="keyword">return</span> tree[root].sum % P;</span><br><span class="line">	<span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">Push_Down</span>(root);</span><br><span class="line">	<span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (L &lt;= mid) &#123;</span><br><span class="line">		ans += <span class="built_in">Query</span>(<span class="built_in">lson</span>(root), l, mid, L, R) % P;</span><br><span class="line">		ans %= P;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (mid &lt; R) &#123;</span><br><span class="line">		ans += <span class="built_in">Query</span>(<span class="built_in">rson</span>(root), mid + <span class="number">1</span>, r, L, R) % P;</span><br><span class="line">		ans %= P;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans % P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*--LCA--*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TChange</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (Top[u] != Top[v]) &#123;</span><br><span class="line">		<span class="keyword">if</span> (Dep[Top[u]] &gt; Dep[Top[v]]) &#123;</span><br><span class="line">			<span class="built_in">Change</span>(<span class="number">1</span>, <span class="number">1</span>, DFNtot, seg[Top[u]], seg[u], num);</span><br><span class="line">			u = fa[Top[u]];</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">Change</span>(<span class="number">1</span>, <span class="number">1</span>, DFNtot, seg[Top[v]], seg[v], num);</span><br><span class="line">			v = fa[Top[v]];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (Dep[u] &gt; Dep[v]) <span class="built_in">swap</span>(u, v);</span><br><span class="line">	<span class="built_in">Change</span>(<span class="number">1</span>, <span class="number">1</span>, DFNtot, seg[u], seg[v], num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">TQuery</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (Top[u] != Top[v]) &#123;</span><br><span class="line">		<span class="keyword">if</span> (Dep[Top[u]] &gt; Dep[Top[v]]) &#123;</span><br><span class="line">			ans = ans + <span class="built_in">Query</span>(<span class="number">1</span>, <span class="number">1</span>, DFNtot, seg[Top[u]], seg[u]) % P;</span><br><span class="line">			ans %= P;</span><br><span class="line">			u = fa[Top[u]];</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			ans = ans + <span class="built_in">Query</span>(<span class="number">1</span>, <span class="number">1</span>, DFNtot, seg[Top[v]], seg[v]) % P;</span><br><span class="line">			ans %= P;</span><br><span class="line">			v = fa[Top[v]];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (Dep[u] &gt; Dep[v]) <span class="built_in">swap</span>(u, v);</span><br><span class="line">	ans = (ans + <span class="built_in">Query</span>(<span class="number">1</span>, <span class="number">1</span>, DFNtot, seg[u], seg[v]) % P) % P;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; N &gt;&gt; M &gt;&gt; R &gt;&gt; P;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++) cin &gt;&gt; val[i];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">		<span class="type">int</span> x, y;</span><br><span class="line">		cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">		<span class="built_in">add</span>(x, y);</span><br><span class="line">		<span class="built_in">add</span>(y, x);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">Podfs1</span>(R, <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">Podfs2</span>(R, R);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">Build</span>(<span class="number">1</span>, DFNtot, <span class="number">1</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span> (M--) &#123;</span><br><span class="line">		<span class="type">int</span> k;</span><br><span class="line">		cin &gt;&gt; k;</span><br><span class="line">		<span class="keyword">if</span> (k == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="type">int</span> x, y, z;</span><br><span class="line">			cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line">			<span class="built_in">TChange</span>(x, y, z);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (k == <span class="number">2</span>) &#123;</span><br><span class="line">			<span class="type">int</span> x, y;</span><br><span class="line">			cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">			cout &lt;&lt; <span class="built_in">TQuery</span>(x, y) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (k == <span class="number">3</span>) &#123;</span><br><span class="line">			<span class="type">int</span> x, z;</span><br><span class="line">			cin &gt;&gt; x &gt;&gt; z;</span><br><span class="line">			<span class="built_in">Change</span>(<span class="number">1</span>, <span class="number">1</span>, DFNtot, seg[x], seg[x] + Size[x] - <span class="number">1</span>, z);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (k == <span class="number">4</span>) &#123;</span><br><span class="line">			<span class="type">int</span> x;</span><br><span class="line">			cin &gt;&gt; x;</span><br><span class="line">			cout &lt;&lt; <span class="built_in">Query</span>(<span class="number">1</span>, <span class="number">1</span>, DFNtot, seg[x], seg[x] + Size[x] - <span class="number">1</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
</search>
